# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-10-25 19:39
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0001_initial'),
        ('product', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome da comunidade')),
                ('geo_lat', models.CharField(blank=True, max_length=255, null=True, verbose_name='Latitude')),
                ('geo_long', models.CharField(blank=True, max_length=255, null=True, verbose_name='Longitude')),
                ('distance_from_capital', models.CharField(blank=True, max_length=255, null=True, verbose_name='Distância até a capital')),
                ('idh_state', models.CharField(blank=True, max_length=255, null=True, verbose_name='IDH do estado')),
                ('idh_city', models.CharField(blank=True, max_length=255, null=True, verbose_name='IDH da cidade')),
                ('energy_type', models.CharField(choices=[('monofasica', 'Monofásica'), ('bifasica', 'Bifásica')], max_length=255, verbose_name='Tipo de energia elétrica')),
                ('families_number', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Número de famílias')),
                ('religion', models.CharField(blank=True, max_length=255, null=True, verbose_name='Religião predominante')),
                ('traditional_culture', models.TextField(blank=True, null=True, verbose_name='Manifestações culturais')),
                ('craftwork', models.TextField(blank=True, help_text='tipos de artesanato da comunidade', null=True, verbose_name='Artesanato')),
                ('traditional_events', models.TextField(blank=True, null=True, verbose_name='Festas típicas')),
                ('sanctuaries', models.PositiveIntegerField(blank=True, default=0, help_text='Número de templos religiosos na comunidade', null=True, verbose_name='Número de templos')),
                ('hospitals_number', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Número de hospitais')),
                ('ready_care_number', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Número de pronto atendimento')),
                ('psf_number', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name="Número de psf's")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community', to='address.Address', verbose_name='Endereço')),
            ],
            options={
                'verbose_name': 'Comunidade',
                'verbose_name_plural': 'Comunidades',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityBiomes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('characteristics', models.TextField(verbose_name='Características')),
                ('type', models.TextField(verbose_name='Tipo do bioma')),
                ('threatened_species', models.TextField(blank=True, null=True, verbose_name='Lista de espécies ameaçadas')),
                ('phytophysionomy', models.TextField(blank=True, null=True, verbose_name='Fitofisionomia')),
                ('ground_type', models.TextField(blank=True, null=True, verbose_name='Tipo do solo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biomes', to='community.Community', verbose_name='Comunidade')),
            ],
            options={
                'verbose_name': 'Bioma da comunidade',
                'verbose_name_plural': 'Biomas da comunidade',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityBiomesPicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome da imagem')),
                ('image', models.ImageField(upload_to='community/biomes/pictures/%y/%m', verbose_name='Imagem')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('biome', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='community.CommunityBiomes', verbose_name='Bioma')),
            ],
            options={
                'verbose_name': 'Imagem do bioma',
                'verbose_name_plural': 'Imagens do bioma',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityContacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome do contato')),
                ('phone', models.CharField(max_length=255, verbose_name='Telefone')),
                ('contact_type', models.CharField(max_length=255, verbose_name='Tipo do contato')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='community.Community', verbose_name='Comunidade')),
            ],
            options={
                'verbose_name': 'Contato da comunidade',
                'verbose_name_plural': 'Contatos da comunidade',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityLeadership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome')),
                ('phone', models.CharField(max_length=255, verbose_name='Telefone')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Lider',
                'verbose_name_plural': 'Lideres',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityLeadershipType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255, verbose_name='Tipo da liderança')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tipo de liderança',
                'verbose_name_plural': 'Tipos de liderança',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityPicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome da imagem')),
                ('image', models.ImageField(upload_to='community/pictures/%y/%m', verbose_name='Imagem')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='community.Community', verbose_name='Project')),
            ],
            options={
                'verbose_name': 'Imagem da comunidade',
                'verbose_name_plural': 'Imagens da comunidade',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunitySchools',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome da escola')),
                ('levels', models.CharField(choices=[('medio', 'Ensino Médio'), ('fundamental', 'Ensino Fundamental'), ('primario', 'Primário'), ('tecnico', 'Técnico'), ('superior', 'Superior')], max_length=255, verbose_name='Nível escolar máximo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schools', to='community.Community', verbose_name='Comunidade')),
            ],
            options={
                'verbose_name': 'Escola da comunidade',
                'verbose_name_plural': 'Escolas da comunidade',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='communityleadership',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='community.CommunityLeadershipType', verbose_name='Tipo de liderança'),
        ),
        migrations.AddField(
            model_name='community',
            name='leadership',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='community.CommunityLeadership', verbose_name='Liderança'),
        ),
        migrations.AddField(
            model_name='community',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='communities', to='product.Product', verbose_name='Produtos'),
        ),
    ]
