# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-11-17 20:15
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('community', '0003_auto_20171115_2147'),
        ('accounts', '0002_auto_20171030_1639'),
        ('product', '0003_auto_20171115_2140'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProvideRawMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_material_type', models.CharField(max_length=255, verbose_name='Tipo de matéria prima')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tipo de matéria prima',
                'verbose_name_plural': 'Tipos de matéria prima',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderCertifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome da certificação')),
                ('valid_to', models.DateTimeField(blank=True, help_text='Válida até. Ex: 15/03/2019', null=True, verbose_name='Validade')),
                ('registered_at', models.DateField(blank=True, help_text='Data referente ao registro da certificação', null=True, verbose_name='Data do registro')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Certificação',
                'verbose_name_plural': 'Certificações',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderGeneralData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nome')),
                ('cnpj', models.CharField(blank=True, max_length=30, null=True, verbose_name='CNPJ')),
                ('activities', models.TextField(blank=True, help_text='Atividades da instituição', null=True, verbose_name='Atividades')),
                ('provider_start_date', models.DateField(blank=True, help_text='Ano do início do fornecimento comercial da entidade', null=True, verbose_name='Início das atividades')),
                ('production_system', models.TextField(blank=True, help_text='Descritivo sobre o sistema de produção do fornecedor', null=True, verbose_name='Sistema de produção')),
                ('training', models.TextField(blank=True, help_text='Capacitações recebidas pela instituição', null=True, verbose_name='Capacitações')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('certifications', models.ManyToManyField(blank=True, help_text='Certificações que o fornecedor possui', to='providers.ProviderCertifications', verbose_name='Certificações')),
                ('clients', models.ManyToManyField(blank=True, help_text='Clientes para o qual fornece', related_name='client_providers', to='accounts.Client', verbose_name='Clientes')),
                ('communities', models.ManyToManyField(blank=True, help_text='Comunidades com as quais trabalha', related_name='community_providers', to='community.Community', verbose_name='Comunidades')),
                ('products', models.ManyToManyField(blank=True, help_text='Espécies de produtos fornecidos', related_name='provider_products', to='product.Product', verbose_name='Produtos')),
            ],
            options={
                'verbose_name': 'Fornecedor',
                'verbose_name_plural': 'Fornecedores',
            },
        ),
        migrations.CreateModel(
            name='ProviderHandlingData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_epi', models.CharField(blank=True, choices=[('completo', 'Completo'), ('parcialmente', 'Parcialmente'), ('nao_utiliza', 'Não utiliza')], help_text="Utiliza de EPI's na colheita/coleta?", max_length=255, null=True, verbose_name="EPI's")),
                ('epi_origin', models.CharField(blank=True, choices=[('comprados_com_recurso_proprio', 'Comprados com recurso próprio'), ('ganhou_da_empresa', 'Ganhou da empresa'), ('ganhou_de_parceiros', 'Ganhou de parceiros'), ('emprestado', 'Emprestado')], help_text="Como adquiriu os EPI's utilizados na colheita/coleta (caso utilize)", max_length=255, null=True, verbose_name='Origem da EPI')),
                ('selects_seeds', models.BooleanField(help_text='Marque caso o fornecedor selecione as sementes', verbose_name='Seleciona as sementes?')),
                ('dries_seeds', models.BooleanField(help_text='Marque caso o fornecedor seque as sementes', verbose_name='Seca as sementes?')),
                ('peels_seeds', models.BooleanField(help_text='Marque caso o fornecedor descasque as sementes', verbose_name='Descasca as sementes?')),
                ('difficult_in_selection', models.BooleanField(help_text='Marque caso o fornecedor tenha dificuldades                                                  na seleção das sementes', verbose_name='Dificuldades na seleção?')),
                ('difficult_reason', models.TextField(blank=True, help_text='Motivo da dificuldade na seleção (caso haja)', null=True, verbose_name='Razão da dificuldade')),
                ('used_material_reason', models.TextField(blank=True, help_text='Motivo da utilização de determinado material', null=True, verbose_name='Razão de utilização do material')),
                ('storage_hygiene', models.CharField(blank=True, choices=[('nao_controla', 'Não controla'), ('controla_parcialmente', 'Controla parcialmente'), ('controla_totalmente_o_local', 'Controla totalmente o local')], help_text='Informação referente higiene                                        e preservação de qualidade do produto', max_length=255, null=True, verbose_name='Higiene/Preservação do armazenamento')),
                ('dry_hygiene', models.CharField(blank=True, choices=[('nao_controla', 'Não controla'), ('controla_parcialmente', 'Controla parcialmente'), ('controla_totalmente_o_local', 'Controla totalmente o local')], help_text='Inormação referente a higiene e preservação de qualidade do produto', max_length=255, null=True, verbose_name='Higiene/Preservação da secagem')),
                ('locomotion', models.TextField(blank=True, help_text='Informação sobre o meio de locomoção até o consumidor', null=True, verbose_name='Meio de locomoção')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Manejo (fornecedor)',
                'verbose_name_plural': 'Manejos (fornecedores)',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderHandlingDryLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor_type', models.CharField(choices=[('area_propria', 'Área própria'), ('area_compartilhada', 'Área compartilhada'), ('area_cedida', 'Área cedida'), ('organizacao', 'Organização')], max_length=255, verbose_name='Piso utilizado na secagem')),
                ('roof_type', models.CharField(blank=True, max_length=255, null=True, verbose_name='Teto utilizado na secagem (caso haja)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Local (secagem)',
                'verbose_name_plural': 'Locais (secagem)',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderHandlingDryMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dry_method', models.CharField(max_length=255, verbose_name='Método utilizado na secagem')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Método de secagem',
                'verbose_name_plural': 'Métodos de secagem',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderHandlingStorageFloor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor_type', models.CharField(max_length=255, verbose_name='Piso utilizado no armazenamento')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Piso (armazenamento)',
                'verbose_name_plural': 'Pisos (armazenamento)',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderHandlingStorageMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material_type', models.CharField(max_length=255, verbose_name='Material utilizado no armazenamento')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Material (armazenamento)',
                'verbose_name_plural': 'Materiais (armazenamento)',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderHandlingStorageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_type', models.CharField(max_length=255, verbose_name='Tipo de armazenamento')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tipo de armazenamento',
                'verbose_name_plural': 'Tipos de armazenamento',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProviderHandlingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('handling_type', models.CharField(max_length=255, verbose_name='Tipo de manejo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Manejo (tipo)',
                'verbose_name_plural': 'Manejos (tipos)',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='providerhandlingdata',
            name='dry_location',
            field=models.ForeignKey(blank=True, help_text='Informação referente ao local da secagem', null=True, on_delete=django.db.models.deletion.CASCADE, to='providers.ProviderHandlingDryLocation', verbose_name='Local de secagem (caso haja)'),
        ),
        migrations.AddField(
            model_name='providerhandlingdata',
            name='dry_method',
            field=models.ForeignKey(blank=True, help_text='Informação sobre                                    o método de secagem utilizado (caso seja utilizado algum)', null=True, on_delete=django.db.models.deletion.CASCADE, to='providers.ProviderHandlingDryMethod', verbose_name='Método de secagem (caso haja)'),
        ),
        migrations.AddField(
            model_name='providerhandlingdata',
            name='handling_type',
            field=models.ForeignKey(blank=True, help_text='informações sobre o manejo do produto', null=True, on_delete=django.db.models.deletion.CASCADE, to='providers.ProviderHandlingType', verbose_name='Tipo de manejo'),
        ),
        migrations.AddField(
            model_name='providerhandlingdata',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='handling_data', to='providers.ProviderGeneralData', verbose_name='Fornecedor'),
        ),
        migrations.AddField(
            model_name='providerhandlingdata',
            name='raw_material',
            field=models.ManyToManyField(blank=True, help_text='Informação sobre o tipo de matéria prima utilizada no produto', to='providers.ProvideRawMaterial', verbose_name='Tipo de matéria prima'),
        ),
        migrations.AddField(
            model_name='providerhandlingdata',
            name='storage_floor',
            field=models.ForeignKey(blank=True, help_text='Informação sobre o piso que é utilizado no                                       armazenamento do produto', null=True, on_delete=django.db.models.deletion.CASCADE, to='providers.ProviderHandlingStorageFloor', verbose_name='Tipo de piso utilizado no                                       armazenamento'),
        ),
        migrations.AddField(
            model_name='providerhandlingdata',
            name='storage_material',
            field=models.ForeignKey(blank=True, help_text='Informação referente ao material                                          utilizado no armazenamento do produto', null=True, on_delete=django.db.models.deletion.CASCADE, to='providers.ProviderHandlingStorageMaterial', verbose_name='Tipo de material utilizado no armazenamento'),
        ),
        migrations.AddField(
            model_name='providerhandlingdata',
            name='storage_type',
            field=models.ForeignKey(blank=True, help_text='Informação sobre o método de armazenamento utilizado no produto', null=True, on_delete=django.db.models.deletion.CASCADE, to='providers.ProviderHandlingStorageType', verbose_name='Tipo de armazenamento'),
        ),
    ]
